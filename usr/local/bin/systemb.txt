#!/bin/bash
# Script principal do BackupSystem
clear

BASE_DIR="/opt/backupsystem"
LOG_FILE="$BASE_DIR/logs/backup.log"

function show_help() {
    echo -e "\n\e[1;31m=== BackupSystem - Vers√£o 0.0.1 - Beta ===\e[0m"
    echo -e "\e[1;33mAutor:\e[0m Sardinha CN"
    echo -e "\e[1;33mUso:\e[0m systemb <comando> [op√ß√µes]\n"

    echo -e "\e[1;32mComandos dispon√≠veis:\e[0m"
    echo -e "  üì¶  \e[1;36msystemb backup\e[0m [-zip|-unzip] <origem> <destino>"
    echo -e "      Faz backup normal, com compress√£o (-zip) ou descompress√£o (-unzip)"
    echo
    echo -e "  üîß  \e[1;36msystemb update\e[0m"
    echo -e "      Atualiza o BackupSystem usando arquivos .deb da pasta de updates"
    echo
    echo -e "  ‚ùå  \e[1;36msystemb uninstall\e[0m"
    echo -e "      Remove completamente o BackupSystem do sistema"
    echo
    echo -e "  üìë  \e[1;36msystemb log\e[0m"
    echo -e "      Exibe os logs no terminal"
    echo -e "  üìë  \e[1;36msystemb log nano\e[0m"
    echo -e "      Abre os logs no editor nano"
    echo -e "  üóëÔ∏è  \e[1;36msystemb log del\e[0m"
    echo -e "      Apaga todo o log (pede confirma√ß√£o)"
    echo
    echo -e "  üÜò  \e[1;36msystemb help\e[0m"
    echo -e "      Mostra este menu de ajuda\n"

    echo -e "\e[1;33mExemplos:\e[0m"
    echo -e "  ‚û§ Backup normal:     \e[1;36msystemb backup /DATA /mnt/Backup\e[0m"
    echo -e "  ‚û§ Backup zipado:     \e[1;36msystemb backup -zip /DATA /mnt/Backup\e[0m"
    echo -e "  ‚û§ Descompactar zip:  \e[1;36msystemb backup -unzip backup.zip /mnt/Restore\e[0m"
    echo
    echo -e "\e[1;34müìÇ Logs em:\e[0m /opt/backupsystem/logs/backup.log"
    echo -e "\e[1;34müíæ Pasta de comandos:\e[0m /opt/backupsystem/commands/"
    echo -e "\e[1;34m‚öôÔ∏è Pasta de updates:\e[0m /opt/backupsystem/updates/\n"
    echo -e "\e[1;31m==============================\e[0m"
}

function log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
}

function check_space() {
    local src="$1"
    local dest="$2"
    local src_size=$(du -s "$src" | cut -f1)
    local free_space=$(df "$dest" | tail -1 | awk '{print $4}')
    # du returns KB, df returns blocks (usually 1K), so units should match
    if [ "$free_space" -lt "$src_size" ]; then
        echo "‚ùå Espa√ßo insuficiente em $dest para o backup."
        log "Espa√ßo insuficiente: src=$src_size KB, dest free=$free_space KB"
        return 1
    fi
    return 0
}

function backup() {
    local mode=""
    local src=""
    local dest=""
    # parse flags
    while [[ "$1" == -* ]]; do
        if [[ "$1" == "-zip" ]]; then
            mode="zip"
        elif [[ "$1" == "-unzip" ]]; then
            mode="unzip"
        else
            echo "‚ùå Op√ß√£o inv√°lida: $1"
            exit 1
        fi
        shift
    done
    src="$1"
    dest="$2"

    if [ -z "$src" ] || [ -z "$dest" ]; then
        echo "‚ùå Uso: systemb backup [-zip|-unzip] <source> <dest>"
        exit 1
    fi

    if [ ! -d "$src" ]; then
        echo "‚ùå Pasta de origem n√£o existe: $src"
        exit 1
    fi

    mkdir -p "$dest"
    if ! check_space "$src" "$dest"; then
        exit 1
    fi

    if [ "$mode" == "zip" ]; then
        echo "üì¶ Compactando e fazendo backup de $src para $dest/backup_$(date +%Y%m%d%H%M%S).zip"
        log "Backup ZIP iniciado: $src -> $dest"
        zip_file="$dest/backup_$(date +%Y%m%d%H%M%S).zip"
        (cd "$src" && zip -r - .) | pv -petra > "$zip_file"
        log "Backup ZIP finalizado: $zip_file"
        echo "‚úîÔ∏è Backup com compress√£o conclu√≠do."
    elif [ "$mode" == "unzip" ]; then
        echo "üìÇ Descompactando backup de $src para $dest"
        log "Descompress√£o iniciada: $src -> $dest"
        unzip "$src" -d "$dest"
        log "Descompress√£o finalizada: $src"
        echo "‚úîÔ∏è Descompress√£o conclu√≠da."
    else
        echo "üìÅ Fazendo backup de $src para $dest"
        log "Backup normal iniciado: $src -> $dest"
        # Copiar arquivos com barra de progresso por arquivo
        find "$src" -type f | while read -r file; do
            rel_path="${file#$src/}"
            dest_file="$dest/$rel_path"
            mkdir -p "$(dirname "$dest_file")"
            pv "$file" > "$dest_file"
            log "Copiado: $file -> $dest_file"
        done
        echo "‚úîÔ∏è Backup conclu√≠do."
        log "Backup normal finalizado: $src -> $dest"
    fi
}

function uninstall() {
    echo -e "\n‚ö†Ô∏è \e[1;31mTem certeza que deseja desinstalar o BackupSystem?\e[0m"
    read -p "[s/N]: " confirm
    case "$confirm" in
        [sS])
            echo -e "\nüóëÔ∏è Removendo arquivos do BackupSystem..."
            sudo rm -f /usr/local/bin/systemb
            sudo rm -rf /opt/backupsystem
            echo -e "‚úîÔ∏è \e[1;32mBackupSystem foi desinstalado com sucesso!\e[0m"
            ;;
        *)
            echo -e "\e[1;33m‚ùå Desinstala√ß√£o cancelada.\e[0m"
            ;;
    esac
}

function update_system() {
    UPDATES_DIR="/opt/backupsystem/updates"
    
    if [ ! -d "$UPDATES_DIR" ]; then
        echo -e "‚ÑπÔ∏è \e[1;33mA pasta de updates n√£o existe: $UPDATES_DIR\e[0m"
        return 1
    fi

    updates=$(ls "$UPDATES_DIR"/backupsystem_*.deb 2>/dev/null)

    if [ -z "$updates" ]; then
        echo -e "‚ÑπÔ∏è \e[1;33mNenhuma atualiza√ß√£o encontrada na pasta $UPDATES_DIR\e[0m"
        return 0
    fi

    for update in $updates; do
        echo -e "üì¶ Instalando update: \e[1;36m$update\e[0m"
        sudo dpkg -i "$update"
        if [ $? -eq 0 ]; then
            echo -e "‚úîÔ∏è \e[1;32mBackupSystem atualizado com sucesso!\e[0m"
        else
            echo -e "‚ùå \e[1;31mFalha ao instalar $update\e[0m"
        fi
    done
}

function show_log() {
    case "$1" in
        nano)
            echo -e "\n\e[1;32m=== Abrindo log no Nano ===\e[0m"
            nano "$LOG_FILE"
            ;;
        del|clear|delete|limpar|deletar)
            read -p "‚ö†Ô∏è Tem certeza que deseja apagar todo o log? [s/N]: " confirm
            case "$confirm" in
                [sS])
                    > "$LOG_FILE"
                    echo -e "\e[1;31m‚úîÔ∏è Log apagado com sucesso.\e[0m"
                    log "Log foi apagado manualmente."
                    ;;
                *)
                    echo -e "\e[1;33m‚ùå Opera√ß√£o cancelada.\e[0m"
                    ;;
            esac
            ;;
        *)
            echo -e "\n\e[1;32m=== Exibindo log no terminal ===\e[0m"
            if [ ! -s "$LOG_FILE" ]; then
                echo -e "\e[1;33mO log est√° vazio.\e[0m"
            else
                echo -e "\e[1;33m--- Conte√∫do do log ---\e[0m"
                cat "$LOG_FILE"
                echo -e "\e[1;33m--- Fim do log ---\e[0m"
            fi
            ;;
    esac
}



case "$1" in
    backup)
        shift
        backup "$@"
        ;;
    uninstall)
        uninstall
        ;;
    update)
        update_system
        ;;
    log)
    shift
    show_log "$@"
    ;;

    help|--help|-h|"")
        show_help
        ;;
    *)
        echo "Comando desconhecido: $1"
        show_help
        exit 1
        ;;
esac
